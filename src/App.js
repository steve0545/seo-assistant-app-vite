import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';
// If you plan to use Firestore later, you would uncomment this:
// import { getFirestore } from 'firebase/firestore';


// Main App component
const App = () => {
    // State variables for the application
    const [industry, setIndustry] = useState(''); // Stores the selected industry
    const [contentType, setContentType] = useState('GMB Post'); // Stores the selected content type
    const [generatedContent, setGeneratedContent] = useState(''); // Stores the content generated by the LLM
    const [isLoading, setIsLoading] = useState(false); // Indicates if content generation is in progress
    const [error, setError] = useState(''); // Stores any error messages
    const [isAuthReady, setIsAuthReady] = useState(false); // Indicates if Firebase authentication is ready

    // New states for meta tag generation
    const [metaTitle, setMetaTitle] = useState('');
    const [metaDescription, setMetaDescription] = useState('');
    const [isGeneratingMeta, setIsGeneratingMeta] = useState(false);

    // New states for content rephrasing
    const [rephraseInstruction, setRephraseInstruction] = useState('');
    const [rephrasedContent, setRephrasedContent] = useState('');
    const [isRephrasing, setIsRephrasing] = useState(false);

    // YOUR ACTUAL FIREBASE CONFIGURATION
    // This is the configuration for your "content-creator-5c119" project
    const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID
    };

    // Initialize Firebase and handle authentication state
    useEffect(() => {
        const initializeFirebaseAndAuth = async () => {
            try {
                // IMPORTANT: Directly use the hardcoded firebaseConfig
                if (firebaseConfig.apiKey && firebaseConfig.projectId) {
                    const app = initializeApp(firebaseConfig);
                    const auth = getAuth(app);

                    // Sign in anonymously as this is designed for Firebase Hosting
                    // where __initial_auth_token is not available.
                    await signInAnonymously(auth);

                    onAuthStateChanged(auth, (user) => {
                        if (user) {
                            console.log("Firebase Auth Ready. User ID:", user.uid);
                            setIsAuthReady(true);
                        } else {
                            console.log("Firebase Auth Not Ready.");
                            setIsAuthReady(false);
                        }
                    });
                } else {
                    // This error should ideally not be hit if firebaseConfig is correctly hardcoded
                    setError("Firebase configuration is missing or incomplete in App.js. Please verify.");
                }
            } catch (err) {
                console.error("Failed to initialize Firebase or authenticate:", err);
                // More specific error message for auth configuration issues
                if (err.code === 'auth/configuration-not-found') {
                    setError(`Firebase Auth Error: Authentication method not enabled. Please go to your Firebase Console, navigate to 'Authentication' -> 'Sign-in method' and enable 'Anonymous' sign-in.`);
                } else {
                    setError(`Failed to initialize Firebase or authenticate: ${err.message}`);
                }
            }
        };

        initializeFirebaseAndAuth();
    }, []); // Empty dependency array means this effect runs once on mount

    // Function to call Gemini API for content generation
    const callGeminiApi = async (userPrompt, loadingSetter, contentSetter) => {
        if (!isAuthReady) {
            setError('Authentication is not ready. Please wait a moment.');
            return;
        }

        loadingSetter(true);
        setError(''); // Clear previous errors

        try {
            const chatHistory = [{ role: "user", parts: [{ text: userPrompt }] }];
            const payload = { contents: chatHistory };
            const apiKey = ""; // API key is handled by the Canvas environment for LLMs

            // Define the API URL for gemini-2.0-flash
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            // Make the fetch call to the Gemini API
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            // Parse the JSON response
            const result = await response.json();

            // Check if the response contains content and update state
            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                contentSetter(text);
            } else {
                setError('Failed to get a valid response from the API. Please try again.');
                console.error("Unexpected API response structure:", result);
            }
        } catch (err) {
            console.error("Error calling Gemini API:", err);
            setError(`Error calling Gemini API: ${err.message}`);
        } finally {
            loadingSetter(false);
        }
    };

    // Main content generation function
    const generateContent = async () => {
        if (!industry.trim()) {
            setError('Please enter an industry.');
            return;
        }

        let prompt = '';
        if (contentType === 'GMB Post') {
            prompt = `As an expert SEO content creator, generate a Google My Business (GMB) post (100-300 characters) for a company in the "${industry}" industry. The post should highlight a current trending topic relevant to this industry and include a clear call to action. Focus on engaging local customers. Provide only the post text, without any additional explanations or formatting.`;
        } else if (contentType === 'Blog Post Idea') {
            prompt = `As an expert SEO content creator, suggest 5 unique and trending blog post ideas for a company in the "${industry}" industry. Each idea should be a compelling title followed by a brief, one-sentence description of the content. Focus on topics that would attract organic search traffic and establish thought leadership. Provide only the list, without any additional explanations or formatting.`;
        } else if (contentType === 'Blog Post') {
            prompt = `As an expert SEO content creator, write a short blog post (around 300-500 words) for a company in the "${industry}" industry. The post should focus on a current trending topic relevant to this industry, be informative, engaging, and include natural keyword integration (without keyword stuffing). Include a clear introduction, 2-3 body paragraphs, and a concise conclusion with a call to action. Provide only the blog post text, without any additional explanations or formatting.`;
        }

        // Reset other generated content when generating new main content
        setMetaTitle('');
        setMetaDescription('');
        setRephrasedContent('');
        await callGeminiApi(prompt, setIsLoading, setGeneratedContent);
    };

    // Function to generate meta tags
    const generateMetaTags = async () => {
        if (!generatedContent.trim()) {
            setError('Please generate content first to create meta tags.');
            return;
        }
        const prompt = `Based on the following content, suggest an SEO-friendly meta title (under 60 characters) and a meta description (under 160 characters). Format the output as "Title: [Your Title]\nDescription: [Your Description]".\n\nContent:\n"${generatedContent}"`;
        await callGeminiApi(prompt, setIsGeneratingMeta, (response) => {
            const lines = response.split('\n');
            const titleLine = lines.find(line => line.startsWith('Title:'));
            const descLine = lines.find(line => line.startsWith('Description:'));
            setMetaTitle(titleLine ? titleLine.replace('Title: ', '').trim() : 'N/A');
            setMetaDescription(descLine ? descLine.replace('Description: ', '').trim() : 'N/A');
        });
    };

    // Function to rephrase content
    const rephraseExistingContent = async () => {
        if (!generatedContent.trim()) {
            setError('Please generate content first to rephrase.');
            return;
        }
        if (!rephraseInstruction.trim()) {
            setError('Please provide an instruction for rephrasing (e.g., "make it more concise", "change tone to professional").');
            return;
        }
        const prompt = `Rephrase the following content according to this instruction: "${rephraseInstruction}". Provide only the rephrased content.\n\nOriginal Content:\n"${generatedContent}"`;
        await callGeminiApi(prompt, setIsRephrasing, setRephrasedContent);
    };


    return (
        <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4 font-sans">
            <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-2xl">
                <h1 className="text-3xl font-bold text-gray-800 mb-6 text-center">SEO Content Assistant</h1>

                {/* Industry Input */}
                <div className="mb-6">
                    <label htmlFor="industry" className="block text-gray-700 text-sm font-semibold mb-2">
                        Your Industry:
                    </label>
                    <input
                        type="text"
                        id="industry"
                        className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="e.g., Real Estate, Healthcare, Tech Gadgets"
                        value={industry}
                        onChange={(e) => setIndustry(e.target.value)}
                    />
                </div>

                {/* Content Type Selection */}
                <div className="mb-6">
                    <label className="block text-gray-700 text-sm font-semibold mb-2">
                        Content Type:
                    </label>
                    <div className="flex flex-wrap gap-4">
                        <label className="inline-flex items-center">
                            <input
                                type="radio"
                                className="form-radio text-blue-600"
                                name="contentType"
                                value="GMB Post"
                                checked={contentType === 'GMB Post'}
                                onChange={() => setContentType('GMB Post')}
                            />
                            <span className="ml-2 text-gray-700">Google My Business Post</span>
                        </label>
                        <label className="inline-flex items-center">
                            <input
                                type="radio"
                                className="form-radio text-blue-600"
                                name="contentType"
                                value="Blog Post Idea"
                                checked={contentType === 'Blog Post Idea'}
                                onChange={() => setContentType('Blog Post Idea')}
                            />
                            <span className="ml-2 text-gray-700">Blog Post Ideas</span>
                        </label>
                        <label className="inline-flex items-center">
                            <input
                                type="radio"
                                className="form-radio text-blue-600"
                                name="contentType"
                                value="Blog Post"
                                checked={contentType === 'Blog Post'}
                                onChange={() => setContentType('Blog Post')}
                            />
                            <span className="ml-2 text-gray-700">Full Blog Post</span>
                        </label>
                    </div>
                </div>

                {/* Generate Button */}
                <button
                    onClick={generateContent}
                    className={`w-full py-3 px-6 rounded-md text-white font-semibold shadow-md transition duration-300
                                ${isLoading ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-75'}`}
                    disabled={isLoading}
                >
                    {isLoading ? 'Generating...' : 'Generate Content'}
                </button>

                {/* Error Message Display */}
                {error && (
                    <div className="mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-md">
                        {error}
                    </div>
                )}

                {/* Generated Content Display */}
                {generatedContent && (
                    <div className="mt-8">
                        <h2 className="text-xl font-semibold text-gray-800 mb-3">Generated Content:</h2>
                        <div className="bg-gray-50 p-5 rounded-md border border-gray-200">
                            <pre className="whitespace-pre-wrap text-gray-800 text-base leading-relaxed">
                                {generatedContent}
                            </pre>
                        </div>

                        {/* Content Enhancement Section */}
                        <div className="mt-8 border-t pt-6 border-gray-200">
                            <h2 className="text-xl font-semibold text-gray-800 mb-4">Content Enhancements</h2>

                            {/* Rephrase Content Section */}
                            <div className="mb-6">
                                <label htmlFor="rephraseInstruction" className="block text-gray-700 text-sm font-semibold mb-2">
                                    Rephrase Instruction:
                                </label>
                                <input
                                    type="text"
                                    id="rephraseInstruction"
                                    className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                                    placeholder="e.g., Make it more concise, Change to a professional tone"
                                    value={rephraseInstruction}
                                    onChange={(e) => setRephraseInstruction(e.target.value)}
                                />
                                <button
                                    onClick={rephraseExistingContent}
                                    className={`w-full mt-3 py-3 px-6 rounded-md text-white font-semibold shadow-md transition duration-300
                                                ${isRephrasing ? 'bg-gray-400 cursor-not-allowed' : 'bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-75'}`}
                                    disabled={isRephrasing}
                                >
                                    {isRephrasing ? 'Rephrasing...' : '✨ Rephrase Content'}
                                </button>
                                {rephrasedContent && (
                                    <div className="mt-4 p-4 bg-purple-50 rounded-md border border-purple-200">
                                        <h3 className="text-lg font-semibold text-purple-800 mb-2">Rephrased Content:</h3>
                                        <pre className="whitespace-pre-wrap text-purple-800 text-base leading-relaxed">
                                            {rephrasedContent}
                                        </pre>
                                    </div>
                                )}
                            </div>

                            {/* Generate Meta Tags Button */}
                            <button
                                onClick={generateMetaTags}
                                className={`w-full py-3 px-6 rounded-md text-white font-semibold shadow-md transition duration-300
                                            ${isGeneratingMeta ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-75'}`}
                                disabled={isGeneratingMeta}
                            >
                                {isGeneratingMeta ? 'Generating Meta...' : '✨ Generate Meta Description & Title Tag'}
                            </button>

                            {/* Meta Tags Display */}
                            {(metaTitle || metaDescription) && (
                                <div className="mt-4 p-4 bg-green-50 rounded-md border border-green-200">
                                    <h3 className="text-lg font-semibold text-green-800 mb-2">Generated Meta Tags:</h3>
                                    <p className="text-green-800 text-base">
                                        <strong className="font-medium">Title:</strong> {metaTitle}
                                    </p>
                                    <p className="text-green-800 text-base mt-1">
                                        <strong className="font-medium">Description:</strong> {metaDescription}
                                    </p>
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default App;
